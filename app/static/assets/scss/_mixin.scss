@mixin clearfix
{
    zoom: 1;
    &:after
    {
        display: block;
        clear: both;
        overflow: hidden;

        content: '';
    }
}

@mixin opacity($val) {
    opacity: $val;
    $val100: $val*100;
    -ms-filter: alpha(opacity=$val100);
    filter: alpha(opacity=$val100);
}

@mixin transition($val, $int)
{
    @if $val == ''
    {
        -webkit-transition: $int;
           -moz-transition: $int;
            -ms-transition: $int;
             -o-transition: $int;
                transition: $int;
    } @else
    {
        -webkit-transition: $val + ' ' + $int;
           -moz-transition: $val + ' ' + $int;
            -ms-transition: $val + ' ' + $int;
             -o-transition: $val + ' ' + $int;
                transition: $val + ' ' + $int;
    }
}

@mixin mediaMinQuery($val1: null)
{
    @media screen and (min-width: $val1+px)
    {
        @content;
    }
}
@mixin mediaMinHeightDevice($val1: null)
{
    @if true
    {
        @media screen and (min-device-height: $val1+px) and (max-device-width: 720px)
        {
            @content;
        }
    }
}
@mixin mediaMinDevice($val1: null)
{
    @if true
    {
        @media screen and (min-device-width: $val1+px)
        {
            @content;
        }
    }
}
@mixin mediaMaxDevice($val1: null)
{
    @if true
    {
        @media screen and (max-device-width: $val1+px)
        {
            @content;
        }
    }
}

@mixin mediaQuery($val1, $val2: null)
{
    @if $val2 == null
    {
        @media screen and (max-width: $val1+px)
        {
            @content;
        }
    } @else
    {
        @media screen and (min-width: $val1+px) and (max-width: $val2+px)
        {
            @content;
        }
    }
}

@mixin mediaHeightQuery($val1, $val2: null)
{
    @if $val2 == null
    {
        @media screen and (max-height: $val1+px)
        {
            @content;
        }
    } @else
    {
        @media screen and (min-height: $val1+px) and (max-height: $val2+px)
        {
            @content;
        }
    }
}
@mixin mediaMinHeightQuery($val1: null)
{
    @media screen and (min-height: $val1+px)
    {
        @content;
    }
}

@mixin ratio($val)
{
    @media (-webkit-min-device-pixel-ratio: $val), (min-resolution: $val + dppx)
    {
        @content;
    }
}

@mixin box-sizing
{
    $setPrefix: -webkit-, -moz-, null;
    $property: box-sizing;
    @each $prefix in $setPrefix
    {
        #{$prefix}#{$property}: border-box;
    }
}

@mixin translateX($val)
{
    -webkit-transform:translateX($val);
       -moz-transform:translateX($val);
        -ms-transform:translateX($val);
         -o-transform:translateX($val);
            transform:translateX($val);
}
@function contains($colors,$var) {
    $contains: false;
    @each $item in $colors { @if $item == $var { $contains: true; } }
    @return $contains;
}
@function orientation-string($type, $from, $w3c:false) {
    $string: '';
    @if $w3c {
        @if $type == 'linear' {
            @if $from == 'top' or $from == 'bottom' {
                $string: 'to bottom, ';
            }
            @else if $from == 'left' or $from == 'right' {
                $string: 'to right, ';
            }
            @else if $from == (left top) or $from == (top left) or $from == (right bottom) or $from == (bottom right) {
                $string: '135deg, ';
            }
            @else {
                $string: '45deg, ';
            }
        } @else if $type == 'radial' {
            $string: 'ellipse at ' + $from + ', ';
        }
    } @else { // new webkit, moz, ms, o

        @if $type == 'linear' {
            @if $from == 'top' or $from == 'bottom' {
                $string: 'top, ';
            }
            @else if $from == 'left' or $from == 'right' {
                $string: 'left, ';
            }
            @else if $from == (left top) or $from == (top left) or $from == (right bottom) or $from == (bottom right) {
                $string: '-45deg, ';
            }
            @else {
                $string: '45deg, ';
            }
        } @else if $type == 'radial' {
            $string: $from + ', ellipse cover, ';
        }
    }
    @return $string;
}

@function color-substring($colors) {

    $i: 1;
    $substring: '';
    $string: '';

    @while $i < length($colors) {
        $substring: nth($colors, $i) + ' ' + nth($colors, $i+1);
        $string: $string + $substring;
        $i: $i + 1;
    }
    @return $string;
}
@function color-string($colors) {

    $i: 1;
    $spacer: ', ';
    $substring: '';
    $string: '';

    @while $i <= length($colors) {
        @if $i == length($colors) {
            $spacer: '';
        }
        $substring: color-substring(nth($colors, $i)) + $spacer;
        $string: $string + $substring;
        $i: $i + 1;
    }
    @return $string;
}
@function ie-gradient-type($direction) {
    @if $first-color {
        @return nth(nth($colors, 1), 1);
    }
    @else {
        @return nth(nth($colors, length($colors)), 1);
    }
}
@function ie-colors($colors, $first-color:true) {
    @if $first-color {
        @return nth(nth($colors, 1), 1);
    }
    @else {
        @return nth(nth($colors, length($colors)), 1);
    }
}
@mixin sgradient($type:'linear', $from:'top', $colors:((rgba(42,179,221,1), 0%),(rgba(183,80,80,1), 100%))) {
    $orientation-string: orientation-string($type, $from);
    $orientation-string-w3c: orientation-string($type, $from, $w3c:true);
    $color-string: #{color-string($colors)};
    $css-string: gradient(#{$orientation-string}#{$color-string});
    $css-string-w3c: gradient(#{$orientation-string-w3c}#{$color-string});
    $ie-gradient-type: 0;

    @if $type != 'vertical' {
        $ie-gradient-type: 1
    }
    background: -webkit-#{$type}-#{$css-string};
    background: -moz-#{$type}-#{$css-string};
    background: -ms-#{$type}-#{$css-string};
    background: -o-#{$type}-#{$css-string};
    background: #{$type}-#{$css-string-w3c};
}
